{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/Deck.js","Workers.js","FindStuntDouble.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","src","imgSrc","alt","name","Deck","useState","positionX","setPositionX","useEffect","alert","judgeLikeDislike","onDragStart","e","preventDefault","onDragOver","node","style","display","x","data","map","workers","handle","defaultPosition","y","grid","onStart","onStop","key","stuntId","img","FindStuntDouble","Workers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCNSC,MAVf,SAAcC,GAEV,OACM,yBAAKC,UAAU,cACX,yBAAKA,UAAU,cAAcC,IAAKF,EAAMG,OAAQC,IAAI,KACpD,uBAAGH,UAAU,cAAcD,EAAMK,Q,gBC4DhCC,MArDf,SAAcN,GAAQ,IAAD,EAEiBO,oBAAU,KAF3B,mBAEVC,EAFU,KAECC,EAFD,OAKSF,mBAAS,IALlB,6BAQjBG,qBAAU,YAlBW,SAACF,GACnBA,GAAa,IACZG,MAAM,YACCH,GAAa,KACpBG,MAAM,SAeNC,CAAiBJ,KAGlB,CAACA,IAEJ,IAAMK,EAAc,SAACC,EAAGd,GACpBc,EAAEC,kBAKAC,EAAa,SAACF,EAAGd,GACnBA,EAAMiB,KAAKC,MAAMC,QAAU,OAC3BV,EAAaT,EAAMoB,IAKvB,OACI,6BACI,yBAAKnB,UAAU,uCACP,yBAAKA,UAAU,kBAEXD,EAAMqB,KAAKC,KAAI,SAACC,GAAD,OACX,kBAAC,IAAD,CACIC,OAAO,kBACPC,gBAAiB,CAACL,GAAI,IAAKM,EAAG,GAC9BC,KAAM,CAAC,EAAE,GACTC,QAASf,EACTgB,OAAQb,EACRc,IAAKP,EAAQQ,SAEb,yBAAK9B,UAAU,kBACX,kBAAC,EAAD,CAAME,OAAQoB,EAAQS,IAAK3B,KAAMkB,EAAQlB,gBCtD9D,GACX,CACI0B,QAAS,EACTC,IAAK,uBACL3B,KAAM,eAEV,CACI0B,QAAS,EACTC,IAAK,qBACL3B,KAAM,aAEV,CACI0B,QAAS,EACTC,IAAK,sBACL3B,KAAM,eAEV,CACI0B,QAAS,EACTC,IAAK,oBACL3B,KAAM,YAEV,CACI0B,QAAS,EACTC,IAAK,oBACL3B,KAAM,YAEV,CACI0B,QAAS,EACTC,IAAK,gBACL3B,KAAM,QCPC4B,MApBf,WAEI,OACI,6BACI,yBAAKhC,UAAU,kBACX,wBAAIA,UAAU,QAAO,yBAAKC,IAAI,mBAAmBE,IAAI,QAArD,KACA,wBAAIH,UAAU,iBAAd,0BAEA,kBAAC,EAAD,CAAMoB,KAAMa,IAEZ,yBAAKjC,UAAU,oBACX,yBAAKC,IAAI,iBAAiBE,IAAI,YAC9B,yBAAKF,IAAI,iBAAiBE,IAAI,a,MCTlD+B,IAASC,OAAO,kBAAC,EAAD,MAAqBC,SAASC,eAAe,SL4HvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5bb64384.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nfunction Card(props) {\n\n    return (\n          <div className=\"card-stack\">\n              <img className=\"stunt-photo\" src={props.imgSrc} alt=\"\"/>\n              <p className=\"stunt-name\">{props.name}</p>\n          </div>\n    );\n}\n\nexport default Card;","import React, {useState, useEffect} from 'react';\nimport Card from \"./Card\";\nimport Draggable from \"react-draggable\";\n\nconst judgeLikeDislike = (positionX) => {\n    if(positionX < -150) {\n        alert(\"disliked\");\n    } else if (positionX > -150) {\n        alert(\"liked\");\n    } else {\n        //needs error handling for the case when user doesn't swipe at all but just clicks on the card\n    }\n};\n\nfunction Deck(props) {\n\n    const [positionX, setPositionX] = useState(-150);\n\n    //store user choice in \"liked\" array as state\n    const [liked, setLiked] = useState([]);\n\n\n    useEffect(()=>{\n        judgeLikeDislike(positionX);\n        //below console.log is to check the final point X\n        //console.log('newpositionX', positionX);\n    }, [positionX]);\n\n    const onDragStart = (e, props) => {\n        e.preventDefault();\n        //below console.log is to check starting point X\n        //console.log('starting', positionX);\n    };\n\n    const onDragOver = (e, props) => {\n        props.node.style.display = \"none\";\n        setPositionX(props.x);\n    };\n\n\n\n    return (\n        <div>\n            <div className=\"flex-container stunt-card-container\">\n                    <div className=\"draggable-card\">\n                    {\n                        props.data.map((workers) => (\n                            <Draggable\n                                handle=\".draggable-card\" // refers to the child that is draggable component\n                                defaultPosition={{x: -150, y: 0}} //defaultPosition is starting point\n                                grid={[2,2]} // grid size that the component moves on. the smaller the number, smoother action.\n                                onStart={onDragStart}\n                                onStop={onDragOver}\n                                key={workers.stuntId} // \"Each Child in the list should have unique key value\" error message resolved\n                            >\n                                <div className=\"draggable-card\">\n                                    <Card imgSrc={workers.img} name={workers.name}/>\n                                </div>\n                            </Draggable>\n                        ))\n                    }\n                    </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Deck;","import React from 'react';\n\nexport default [\n    {\n        stuntId: 1,\n        img: \"./img/blackwidow.png\",\n        name: \"Black Widow\"\n    },\n    {\n        stuntId: 2,\n        img: \"./img/deadpool.png\",\n        name: \"Dead Pool\"\n    },\n    {\n        stuntId: 3,\n        img: \"./img/drstrange.png\",\n        name: \"Dr. Strange\"\n    },\n    {\n        stuntId: 4,\n        img: \"./img/ironman.png\",\n        name: \"Iron Man\"\n    },\n    {\n        stuntId: 5,\n        img: \"./img/kyloren.png\",\n        name: \"Kylo Ren\"\n    },\n    {\n        stuntId: 6,\n        img: \"./img/rey.png\",\n        name: \"Rey\"\n    }\n];\n\n","import React from 'react';\nimport Deck from \"./Components/Deck\";\nimport Workers from \"./Workers\";\n\nfunction FindStuntDouble() {\n\n    return (\n        <div>\n            <div className=\"flex-container\">\n                <h1 className=\"logo\"><img src=\"./img/milogo.svg\" alt=\"mi3\"/> </h1>\n                <h2 className=\"position-text\">Position: Stunt double</h2>\n\n                <Deck data={Workers} />\n\n                <div className=\"user-guide-icons\">\n                    <img src=\"./img/nope.svg\" alt=\"dislike\"/>\n                    <img src=\"./img/like.svg\" alt=\"like\"/>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default FindStuntDouble;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport FindStuntDouble from \"./FindStuntDouble\";\nimport \"./Styles/Deck.scss\";\n\n\nReactDOM.render(<FindStuntDouble />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}